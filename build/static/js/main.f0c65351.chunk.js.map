{"version":3,"sources":["Components/Contact/Contact.module.css","Components/Filter/Filter.module.css","App.module.css","redux/contact-actions.js","Components/Form/Form.js","Components/Contact/Contact.js","redux/contact-filter.js","Components/Filter/Filter.js","App.js","redux/contact-reducer.js","redux/contact-store.js","index.js","Components/Form/Form.module.css"],"names":["module","exports","getSubmitData","createAction","handleDelete","changeFilterValue","Form","dispatch","useDispatch","useState","name","setName","number","setNumber","id","setId","handleClick","event","target","value","trim","contact","useSelector","contacts","map","resetState","className","s","thumb","onSubmit","preventDefault","includes","toLowerCase","toast","error","action","input","type","pattern","title","required","onChange","uuidv4","button","Contacts","filter","contactList","onClick","getFilter","state","Filter","label","evt","App","Contact","contactsReducer","createReducer","actions","payload","filterReducer","_","persistConfig","key","storage","blacklist","rootReducer","combineReducers","componentReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f0c65351.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"Contact_thumb__16W6M\",\"contactList\":\"Contact_contactList__SLckR\",\"button\":\"Contact_button__3JwC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__pIpVt\",\"input\":\"Filter_input__3DuC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2Jxmv\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst getSubmitData = createAction('contacts/getSubmitData');\nconst handleDelete = createAction('contacts/handleDelete');\nconst changeFilterValue = createAction('contacts/changeFilterValue');\n\nexport default { getSubmitData, handleDelete, changeFilterValue };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './Form.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport action from '../../redux/contact-actions';\nimport { toast } from 'react-toastify';\n\nexport function Form() {\n    Form.propTypes = {\n        submitMethod: PropTypes.func,\n    };\n\n    const dispatch = useDispatch();\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const [id, setId] = useState('');\n\n    const handleClick = event => {\n        const { value, name, id } = event.target;\n\n        switch (name) {\n            case 'name':\n                setName(value.trim());\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n        setId(id);\n    };\n\n    const contact = useSelector(({ contacts }) =>\n        contacts.map(({ name }) => name),\n    );\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (contact.includes(name.toLowerCase())) {\n            return toast.error('Hey, this name always here!');\n        }\n        dispatch(action.getSubmitData({ name, number, id }));\n        resetState();\n    };\n\n    const resetState = () => {\n        setName('');\n        setNumber('');\n        setId('');\n    };\n\n    return (\n        <form className={s.thumb} onSubmit={handleSubmit}>\n            <label>\n                <span className={s.name}>Name</span>\n                <input\n                    className={s.input}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    value={name}\n                    onChange={handleClick}\n                    id={uuidv4()}\n                />\n            </label>\n\n            <label>\n                <span className={s.name}>Number</span>\n                <input\n                    type=\"tel\"\n                    className={s.input}\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    onChange={handleClick}\n                    value={number}\n                    id={uuidv4()}\n                />\n            </label>\n            <button type=\"submit\" className={s.button}>\n                Save contact\n            </button>\n        </form>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Contact.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport action from '../../redux/contact-actions';\n\nconst Contacts = () => {\n    const contacts = useSelector(({ contacts, filter }) => {\n        const visibleContacts = contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n        return visibleContacts;\n    });\n\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <ul className={s.thumb}>\n                {contacts &&\n                    contacts.map(contact => {\n                        return (\n                            <li className={s.contactList} key={contact.id}>\n                                {contact.name}: {contact.number}\n                                <button\n                                    className={s.button}\n                                    type=\"button\"\n                                    onClick={() => {\n                                        dispatch(\n                                            action.handleDelete(contact.id),\n                                        );\n                                    }}\n                                >\n                                    Delete\n                                </button>\n                            </li>\n                        );\n                    })}\n            </ul>\n        </div>\n    );\n};\n\nexport default Contacts;\n\nContacts.propTypes = {\n    contacts: PropTypes.array,\n    deleteFunction: PropTypes.func,\n};\n","export const getFilter = state => {\n    return state.filter;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport action from '../../redux/contact-actions';\nimport { getFilter } from '../../redux/contact-filter';\n\nconst Filter = () => {\n    const value = useSelector(getFilter);\n    const dispatch = useDispatch();\n    return (\n        <label className={s.label}>\n            Filter contact by name\n            <input\n                className={s.input}\n                type=\"text\"\n                value={value}\n                onChange={evt => {\n                    dispatch(action.changeFilterValue(evt.target.value));\n                }}\n            />\n        </label>\n    );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n};\n","import React from 'react';\nimport { Form } from './Components/Form/Form';\nimport Contacts from './Components/Contact/Contact';\nimport Filter from './Components/Filter/Filter';\nimport s from './App.module.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const App = () => {\n    return (\n        <>\n            <h1 className={s.title}>PhoneBook</h1>\n            <Form />\n            <h2 className={s.title}>Contacts</h2>\n            <Filter />\n            <Contacts />\n            <ToastContainer />\n        </>\n    );\n};\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contact-actions';\n\nconst contactsReducer = createReducer([], {\n    [actions.getSubmitData]: (state, action) => {\n        return [...state, action.payload];\n    },\n\n    [actions.handleDelete]: (state, action) => {\n        return state.filter(state => state.id !== action.payload);\n    },\n});\n\nconst filterReducer = createReducer('', {\n    [actions.changeFilterValue]: (_, action) => {\n        return action.payload;\n    },\n});\n\nexport default { contactsReducer, filterReducer };\n","import { combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport componentReducer from './contact-reducer';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n\nconst rootReducer = combineReducers({\n    contacts: componentReducer.contactsReducer,\n    filter: componentReducer.filterReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n    reducer: persistedReducer,\n    devTools: process.env.NODE_ENV === 'development',\n    middleware: getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    }),\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport store from './redux/contact-store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"Form_thumb__1QbDT\",\"name\":\"Form_name__B51y9\",\"input\":\"Form_input__3KnTg\",\"button\":\"Form_button__7HSOa\"};"],"sourceRoot":""}